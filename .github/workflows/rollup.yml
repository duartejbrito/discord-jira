name: Rollup

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.17.1]
    steps:
      - uses: actions/checkout@v4
      - run: npm install
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm run build --if-present
      - uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: dist

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.17.1]
    steps:
      - uses: actions/checkout@v4
      - run: npm install
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm run test:ci 2>&1 | tee test_output.log
      - name: Generate Coverage Summary
        run: |
          echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract Jest coverage table and convert to markdown table
          if [ -f "test_output.log" ]; then
            echo "| File | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s |" >> $GITHUB_STEP_SUMMARY
            echo "|------|---------|----------|---------|---------|-------------------|" >> $GITHUB_STEP_SUMMARY
            
            # Extract the coverage table from Jest output and convert to markdown
            sed -n '/^----/,/^Test Suites:/p' test_output.log | \
            grep -v '^----' | \
            grep -v '^Test Suites:' | \
            grep -v '^$' | \
            while IFS='|' read -r file stmts branch funcs lines uncovered; do
              if [[ -n "$file" && "$file" != *"File"* ]]; then
                # Clean up the fields (remove leading/trailing spaces), but keep leading spaces for file column
                stmts=$(echo "$stmts" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                branch=$(echo "$branch" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                funcs=$(echo "$funcs" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                lines=$(echo "$lines" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                uncovered=$(echo "$uncovered" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                
                # Only add rows that have actual content
                if [[ -n "$file" && "$file" != "" ]]; then
                  echo "| $file | $stmts | $branch | $funcs | $lines | $uncovered |" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done
          else
            echo "| File | Coverage | Error |" >> $GITHUB_STEP_SUMMARY
            echo "|------|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| - | - | Coverage table not found in test output |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Add overall coverage summary from LCOV data
          if [ -f "coverage/lcov.info" ]; then
            echo "## 📈 Overall Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Coverage | Covered/Total |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|---------------|" >> $GITHUB_STEP_SUMMARY
            
            # Sum up all the values from LCOV
            LINES_FOUND=$(grep "^LF:" coverage/lcov.info | cut -d: -f2 | awk '{sum += $1} END {print sum}')
            LINES_HIT=$(grep "^LH:" coverage/lcov.info | cut -d: -f2 | awk '{sum += $1} END {print sum}')
            FUNCTIONS_FOUND=$(grep "^FNF:" coverage/lcov.info | cut -d: -f2 | awk '{sum += $1} END {print sum}')
            FUNCTIONS_HIT=$(grep "^FNH:" coverage/lcov.info | cut -d: -f2 | awk '{sum += $1} END {print sum}')
            BRANCHES_FOUND=$(grep "^BRF:" coverage/lcov.info | cut -d: -f2 | awk '{sum += $1} END {print sum}')
            BRANCHES_HIT=$(grep "^BRH:" coverage/lcov.info | cut -d: -f2 | awk '{sum += $1} END {print sum}')
            
            # Calculate and display percentages
            if [ "$LINES_FOUND" -gt 0 ]; then
              LINE_PCT=$(awk "BEGIN {printf \"%.1f\", $LINES_HIT * 100 / $LINES_FOUND}")
              echo "| 📝 Lines | ${LINE_PCT}% | ${LINES_HIT}/${LINES_FOUND} |" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "$FUNCTIONS_FOUND" -gt 0 ]; then
              FUNC_PCT=$(awk "BEGIN {printf \"%.1f\", $FUNCTIONS_HIT * 100 / $FUNCTIONS_FOUND}")
              echo "| 🔧 Functions | ${FUNC_PCT}% | ${FUNCTIONS_HIT}/${FUNCTIONS_FOUND} |" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "$BRANCHES_FOUND" -gt 0 ]; then
              BRANCH_PCT=$(awk "BEGIN {printf \"%.1f\", $BRANCHES_HIT * 100 / $BRANCHES_FOUND}")
              echo "| 🌿 Branches | ${BRANCH_PCT}% | ${BRANCHES_HIT}/${BRANCHES_FOUND} |" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Download the 'coverage-report' artifact for detailed HTML report**" >> $GITHUB_STEP_SUMMARY
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

  build-docker:
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            package.json
            .dockerignore
            Dockerfile
      - uses: actions/download-artifact@v4
        with:
          name: app-build
          path: dist
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/duartejbrito/discord-jira:latest
            syter/discord-jira:latest
  deploy:
    if: github.event_name != 'pull_request'
    needs: [build-docker]
    runs-on: ubuntu-latest
    steps:
      - uses: joelwmale/webhook-action@cc1a66f987e1591785273fd6f9d2f7a9d8d7c9cd
        with:
          url: ${{ secrets.WEBHOOK_URL }}
